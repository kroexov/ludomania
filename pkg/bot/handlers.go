package bot

import (
	"bytes"
	"context"
	"fmt"
	"github.com/go-pg/pg/v10"
	"gradebot/pkg/db"
	"gradebot/pkg/embedlog"
	"math/rand"
	"strconv"
	"strings"
	"sync"
	"text/template"
	"time"

	"github.com/go-telegram/bot"
	"github.com/go-telegram/bot/models"

	"golang.org/x/text/language"
	"golang.org/x/text/message"
)

const (
	patternPapikSlots         = "papikSlots"
	patternMayatinRoulette    = "mayatinRoulette"
	patternMayatinRouletteBet = "mayatinBet"
	patternPovyshevExams      = "povyshevExams"
	patternBuyBack            = "buyback"
	playersRating             = "rating"

	patternMayatinRouletteBetN = "_n"
	patternMayatinRouletteBetP = "_p"
	patternMayatinRouletteBetB = "_b"
	patternMayatinRouletteBetU = "_u"
)

var p = message.NewPrinter(language.German)

var slotsResults = [7]string{
	"https://i.ibb.co/1YqJpXwW/photo-2025-03-21-18-45-11.jpg",
	"https://i.ibb.co/jPJ6TJ7Q/photo-2025-03-21-18-45-14.jpg",
	"https://i.ibb.co/Z6PhZ8jh/photo-2025-03-21-18-45-17.jpg",
	"https://i.ibb.co/qYLRLcN0/photo-2025-03-21-18-45-19.jpg",
	"https://i.ibb.co/m5Ykp15w/photo-2025-03-21-18-45-22.jpg",
	"https://i.ibb.co/pBYcBbDJ/photo-2025-03-21-18-45-25.jpg",
	"https://i.ibb.co/rRBVsQJC/photo-2025-03-21-18-45-27.jpg",
}

var jackPotPapikyan = "https://i.ibb.co/3yPD09VM/image.png"
var jackPotITMO = "https://i.ibb.co/QWq12Yq/image.png"

type MayatinRouletteCategory struct {
	CategoryName string
	CategoryPic  string
	WinSum       int
}

var mayatinCategories = map[string]MayatinRouletteCategory{
	patternMayatinRouletteBetN: {
		CategoryName: "–ù–∞–¥–µ–∂–Ω–æ—Å—Ç—å",
		CategoryPic:  "https://i.ibb.co/mCxMpSdk/image.png",
		WinSum:       1500000,
	},
	patternMayatinRouletteBetP: {
		CategoryName: "–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å",
		CategoryPic:  "https://i.ibb.co/Zpqh23VB/image.png",
		WinSum:       1500000,
	},
	patternMayatinRouletteBetB: {
		CategoryName: "–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å",
		CategoryPic:  "https://i.ibb.co/WNbKBsrp/image.png",
		WinSum:       1500000,
	},
	patternMayatinRouletteBetU: {
		CategoryName: "–£–≤–∞–∂–∞–µ–º—ã–π –∫–æ–ª–ª–µ–≥–∞",
		CategoryPic:  "https://i.ibb.co/DPjH6ym5/image.png",
		WinSum:       5000000,
	},
}

type BotService struct {
	embedlog.Logger
	db db.DB

	cr                      db.CommonRepo
	mayatinRouletteBets     *sync.Map
	mu                      sync.Mutex
	isMayatinRouletteActive bool
	mayatinRouletteUsers    map[int]struct{}
	mayatinCategoriesVotes  map[string]int

	papikyanLock map[int]struct{}
}

func NewBotService(logger embedlog.Logger, dbo db.DB) *BotService {
	return &BotService{Logger: logger, db: dbo, cr: db.NewCommonRepo(dbo), mayatinRouletteBets: new(sync.Map), papikyanLock: make(map[int]struct{})}
}

func (bs *BotService) RegisterBotHandlers(b *bot.Bot) {
	b.RegisterHandler(bot.HandlerTypeCallbackQueryData, patternPapikSlots, bot.MatchTypePrefix, bs.PapikRouletteHandler)
	b.RegisterHandler(bot.HandlerTypeCallbackQueryData, patternMayatinRoulette, bot.MatchTypePrefix, bs.MayatinRouletteHandler)
	b.RegisterHandler(bot.HandlerTypeCallbackQueryData, patternMayatinRouletteBet, bot.MatchTypePrefix, bs.MayatinRouletteBetHandler)
	b.RegisterHandler(bot.HandlerTypeCallbackQueryData, playersRating, bot.MatchTypePrefix, bs.PlayersRatingHandler)
	b.RegisterHandler(bot.HandlerTypeCallbackQueryData, patternBuyBack, bot.MatchTypePrefix, bs.BuyBackHandler)
}

func (bs *BotService) DefaultHandler(ctx context.Context, b *bot.Bot, update *models.Update) {
	if update.Message != nil && update.Message.ViaBot != nil && update.Message.Chat.Type == models.ChatTypeSupergroup && update.Message.ViaBot.ID == 7672429736 && update.Message.MessageThreadID != 8388 {
		_, err := b.DeleteMessage(ctx, &bot.DeleteMessageParams{ChatID: update.Message.Chat.ID, MessageID: update.Message.ID})
		if err != nil {
			bs.Errorf("%v", err)
			return
		}
	}
	if update.InlineQuery != nil && update.InlineQuery.From != nil {
		if err := bs.answerInlineQuery(ctx, b, update); err != nil {
			bs.Errorf("%v", err)
		}
		return
	}
	return
}

func (bs *BotService) answerInlineQuery(ctx context.Context, b *bot.Bot, update *models.Update) error {
	username := update.InlineQuery.From.Username
	user, err := bs.cr.OneLudoman(ctx, &db.LudomanSearch{LudomanNickname: &username})
	if err != nil {
		return err
	}
	if user == nil {
		newUser, err := bs.cr.AddLudoman(ctx, &db.Ludoman{
			LudomanNickname: username,
			Balance:         1000000,
		})
		if err != nil {
			return err
		}
		// send answer to the query
		_, err = b.AnswerInlineQuery(ctx, &bot.AnswerInlineQueryParams{
			//Button: &models.InlineQueryResultsButton{
			//	Text:           "–û—Å—Ç–∞–≤–∏—Ç—å —Ñ–∏–¥–±–µ–∫",
			//	StartParameter: "1",
			//},
			InlineQueryID: update.InlineQuery.ID,
			Results: []models.InlineQueryResult{
				&models.InlineQueryResultArticle{
					ID:           "1",
					Title:        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!",
					ThumbnailURL: "https://i.ibb.co/Xfx3C5wH/image-1.jpg",
					ReplyMarkup: models.InlineKeyboardMarkup{
						InlineKeyboard: [][]models.InlineKeyboardButton{
							{
								models.InlineKeyboardButton{
									Text:         "–°–ª–æ—Ç—ã –ü–∞–ø–∏–∫—è–Ω–∞",
									CallbackData: patternPapikSlots + "_" + strconv.Itoa(newUser.ID) + "_1",
								},
							},
							{
								models.InlineKeyboardButton{
									Text:         "–†—É–ª–µ—Ç–∫–∞ –ú–∞—è—Ç–∏–Ω–∞",
									CallbackData: patternMayatinRoulette + "_" + strconv.Itoa(newUser.ID),
								},
							},
							{
								models.InlineKeyboardButton{
									Text:         "–≠–∫–∑–∞–º–µ–Ω –ü–æ–≤—ã—à–µ–≤–∞",
									CallbackData: patternPovyshevExams + "_" + strconv.Itoa(newUser.ID),
								},
							},
						}},
					InputMessageContent: &models.InputTextMessageContent{
						MessageText: fmt.Sprintf("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ò$ - –ö–∞–∑–∏–∫, @%s!\n–í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω 1.000.000 I$Coins –∑–∞ –ø–µ—Ä–≤—ã–π –≤–∏–∑–∏—Ç. –í—ã–±–∏—Ä–∞–π—Ç–µ –∏–≥—Ä—É –∏ –ø–æ–±–µ–∂–¥–∞–π—Ç–µ!", username),
					}},
			},
			IsPersonal: true,
			CacheTime:  1,
		})
	} else {
		_, err = b.AnswerInlineQuery(ctx, &bot.AnswerInlineQueryParams{
			//Button: &models.InlineQueryResultsButton{
			//	Text:           "–û—Å—Ç–∞–≤–∏—Ç—å —Ñ–∏–¥–±–µ–∫",
			//	StartParameter: "1",
			//},
			InlineQueryID: update.InlineQuery.ID,
			Results: []models.InlineQueryResult{
				&models.InlineQueryResultArticle{
					ID:           "2",
					Title:        "–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É!",
					ThumbnailURL: "https://i.ibb.co/Xfx3C5wH/image-1.jpg",
					ReplyMarkup: models.InlineKeyboardMarkup{
						InlineKeyboard: [][]models.InlineKeyboardButton{
							{
								models.InlineKeyboardButton{
									Text:         "–°–ª–æ—Ç—ã –ü–∞–ø–∏–∫—è–Ω–∞",
									CallbackData: patternPapikSlots + "_" + strconv.Itoa(user.ID) + "_1",
								},
							},
							{
								models.InlineKeyboardButton{
									Text:         "–†—É–ª–µ—Ç–∫–∞ –ú–∞—è—Ç–∏–Ω–∞",
									CallbackData: patternMayatinRoulette + "_" + strconv.Itoa(user.ID),
								},
							},
							{
								models.InlineKeyboardButton{
									Text:         "–≠–∫–∑–∞–º–µ–Ω –ü–æ–≤—ã—à–µ–≤–∞ (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)",
									CallbackData: patternPovyshevExams + "_" + strconv.Itoa(user.ID),
								},
							},
						}},
					InputMessageContent: &models.InputTextMessageContent{
						MessageText: fmt.Sprintf("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ò$ - –ö–∞–∑–∏–∫, @%s!\n–í–∞—à –±–∞–ª–∞–Ω—Å: %s I$Coins\n–í—ã–±–∏—Ä–∞–π—Ç–µ –∏–≥—Ä—É –∏ –ø–æ–±–µ–∂–¥–∞–π—Ç–µ!", username, p.Sprintf("%d", user.Balance)),
					}},
				&models.InlineQueryResultArticle{
					ID:           "3",
					Title:        "–†–µ–π—Ç–∏–Ω–≥ –∏–≥—Ä–æ–∫–æ–≤!",
					ThumbnailURL: "https://russia-rating.ru/wp-content/uploads/2024/09/567.jpg",
					ReplyMarkup: models.InlineKeyboardMarkup{
						InlineKeyboard: [][]models.InlineKeyboardButton{
							{
								models.InlineKeyboardButton{
									Text:         "–£–∑–Ω–∞—Ç—å —Ä–µ–π—Ç–∏–Ω–≥",
									CallbackData: playersRating,
								},
							},
						}},
					InputMessageContent: &models.InputTextMessageContent{
						MessageText: fmt.Sprintf("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ò$ - –ö–∞–∑–∏–∫, @%s!\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Ä–µ–π—Ç–∏–Ω–≥ –∏–≥—Ä–æ–∫–æ–≤!", username),
					}},
				&models.InlineQueryResultArticle{
					ID:           "4",
					Title:        "–ü—Ä–∞–≤–∏–ª–∞",
					ThumbnailURL: "https://casino.ru/wp-content/uploads/articles/poker/poker-1-400x266.jpg",
					InputMessageContent: &models.InputTextMessageContent{
						MessageText: fmt.Sprintf("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ò$ - –ö–∞–∑–∏–∫, @%s!\n–í–æ—Ç —Å–ø–∏—Å–æ–∫ –Ω–∞—à–∏—Ö —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏–π:\n1. –°–ª–æ—Ç—ã –ü–∞–ø–∏–∫—è–Ω–∞. –í—Ö–æ–¥ 100.000, —à–∞–Ω—Å –Ω–∞ –≤—ã–∏–≥—Ä—ã—à 1/7, —Ä–∞–∑–º–µ—Ä –≤—ã–∏–≥—Ä—ã—à–∞ 500.000\n2. –†—É–ª–µ—Ç–∫–∞ –ú–∞—è—Ç–∏–Ω–∞. –í—Ö–æ–¥ 100.000, —à–∞–Ω—Å—ã –Ω–∞ –≤—ã–∏–≥—Ä—ã—à: 3/10 —Å –≤–æ–∑–≤—Ä–∞—Ç–æ–º 300.000, –ª–∏–±–æ 1/10 —Å –≤–æ–∑–≤—Ä–∞—Ç–æ–º 1.000.000\n3. –≠–∫–∑–∞–º–µ–Ω –ü–æ–≤—ã—à–µ–≤–∞ (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ). –í—Ö–æ–¥ 100.000, —à–∞–Ω—Å—ã –Ω–∞ –≤—ã–∏–≥—Ä—ã—à 1/6 –≤ —Ä–∞–∑–º–µ—Ä–µ 500.000, –ª–∏–±–æ –≤–∑—è—Ç—å —Å–µ–¥—å–º–æ–π \"—É–¥–∞—á–Ω—ã–π –±–∏–ª–µ—Ç\" —Å —à–∞–Ω—Å–æ–º 50/50 –∏ –≤—ã–∏–≥—Ä—ã—à–µ–º 500.000, –Ω–æ —Å—Ç–∞–≤–∫–æ–π 300.000\n\n–í–æ –≤—Å–µ—Ö –∞–≤—Ç–æ–º–∞—Ç–∞—Ö –µ—Å—Ç—å 1/100 —à–∞–Ω—Å –Ω–∞ –ì–∏–≥–∞–≤—ã–∏–≥—Ä—ã—à –≤ —Ä–∞–∑–º–µ—Ä–µ 10.000.000! (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)", username),
					}},
				&models.InlineQueryResultArticle{
					ID:           "5",
					Title:        "–û—Å–æ–±—ã–µ –æ–ø—Ü–∏–∏ ü§≠",
					ThumbnailURL: "https://linda.nyc3.cdn.digitaloceanspaces.com/370_npd_webp-o_18/sticker-fan_11513288_o.webp",
					InputMessageContent: &models.InputTextMessageContent{
						MessageText: fmt.Sprintf("ü§≠ü§≠ü§≠ü§≠ü§≠ü§≠ü§≠"),
					}},
				&models.InlineQueryResultGif{
					ID:                "6",
					GifURL:            "https://img2.vombat.su/images/post/big/2024/09/12/17261016664048.gif?class=max",
					ThumbnailURL:      "https://img2.vombat.su/images/post/big/2024/09/12/17261016664048.gif?class=max",
					ThumbnailMimeType: "image/gif",
					InputMessageContent: &models.InputTextMessageContent{
						MessageText: `–†–µ–∫–ª–∞–º–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è\!
||–õ—É—á—à–∏–π –º–∏–Ω–∏ –∞–ø–ø [–ø–æ–ª–∫–∞](https://t.me/polkabot_news) –∑–∞—Ä–µ–ª–∏–∑–∏–ª—Å—è –∏ –∂–¥–µ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤\. –ë—É–¥—å—Ç–µ –ø–µ—Ä–≤—ã–º–∏\!||`,
						ParseMode: models.ParseModeMarkdown,
					}},
			},
			IsPersonal: true,
			CacheTime:  1,
		})
	}

	return err
}

func (bs *BotService) PapikRouletteHandler(ctx context.Context, b *bot.Bot, update *models.Update) {
	parts := strings.Split(update.CallbackQuery.Data, "_")
	if len(parts) < 3 {
		bs.Errorf("len(parts) < 3")
		return
	}

	koef, err := strconv.Atoi(parts[2])
	if err != nil {
		bs.Errorf("%v", err)
		return
	}

	// find user
	userId, err := strconv.Atoi(parts[1])
	if err != nil {
		bs.Errorf("%v", err)
	}
	user, err := bs.cr.LudomanByID(ctx, userId)
	if err != nil {
		bs.Errorf("%v", err)
	}

	if _, ok := bs.papikyanLock[user.ID]; ok {
		_, err = b.AnswerCallbackQuery(ctx, &bot.AnswerCallbackQueryParams{
			CallbackQueryID: update.CallbackQuery.ID,
			Text:            "–ê–≤—Ç–æ–º–∞—Ç –æ—Ç–¥—ã—Ö–∞–µ—Ç, –∏ –≤—ã –Ω–µ–º–Ω–æ–≥–æ –æ—Ç–¥–æ—Ö–Ω–∏—Ç–µ :)",
			ShowAlert:       true,
		})
		return
	}

	if user.LudomanNickname != update.CallbackQuery.From.Username {
		_, err = b.AnswerCallbackQuery(ctx, &bot.AnswerCallbackQueryParams{
			CallbackQueryID: update.CallbackQuery.ID,
			Text:            "–≠—Ç–æ –Ω–µ –≤–∞—à –∞–≤—Ç–æ–º–∞—Ç! –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–æ—Ç–∞ –∏ —Ç–æ–∂–µ —Å–º–æ–∂–µ—Ç–µ —Å—ã–≥—Ä–∞—Ç—å :)",
			ShowAlert:       true,
		})
		return
	}

	if user.Balance < 100000*koef {
		if user.Balance < 100000 {
			bs.lossHandler(ctx, b, update, parts[1])
			return
		}
		_, err = b.AnswerCallbackQuery(ctx, &bot.AnswerCallbackQueryParams{
			CallbackQueryID: update.CallbackQuery.ID,
			Text:            "–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥ –¥–ª—è —ç—Ç–æ–π —Å—Ç–∞–≤–∫–∏ :/",
			ShowAlert:       true,
		})
		return
	}

	bs.papikyanLock[user.ID] = struct{}{}
	defer delete(bs.papikyanLock, user.ID)

	b.EditMessageMedia(ctx, &bot.EditMessageMediaParams{
		InlineMessageID: update.CallbackQuery.InlineMessageID,
		Media: &models.InputMediaVideo{
			Media:     "https://media.tenor.com/_yoDqyYP8aYAAAAM/casino77-slot-machine.gif",
			Caption:   "–ö—Ä—É—Ç–∏–º—Å—è...",
			ParseMode: models.ParseModeHTML,
			//HasSpoiler: true,
		},
	})

	time.Sleep(5 * time.Second)

	num := rand.Intn(len(slotsResults))
	var res string
	switch num {
	case 0:
		err = bs.updateBalance(400000*koef, []int{user.ID})
		if err != nil {
			bs.Errorf("%v", err)
			return
		}
		res = fmt.Sprintf("@%s, –ü–æ–±–µ–¥–∞! –í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ +%s I$Coins. –í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: %s I$Coins", update.CallbackQuery.From.Username, p.Sprintf("%d", 500000*koef), p.Sprintf("%d", user.Balance+400000*koef))
	default:
		err = bs.updateBalance(-100000*koef, []int{user.ID})
		if err != nil {
			bs.Errorf("%v", err)
			return
		}
		res = fmt.Sprintf("@%s, –ù–µ—É–¥–∞—á–∞! –í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: %s I$Coins", update.CallbackQuery.From.Username, p.Sprintf("%d", user.Balance-100000*koef))
	}

	pic := slotsResults[num]

	if rand.Intn(667) == 666 {
		err = bs.updateBalance(100000000*koef, []int{user.ID})
		if err != nil {
			bs.Errorf("%v", err)
			return
		}
		res = fmt.Sprintf("@%s, –ì–ò–ì–ê–î–ñ–ï–ö–ü–û–¢! –° –ø—Ä–æ—à–µ–¥—à–∏–º 125-–º –¥–Ω—ë–º —Ä–æ–∂–¥–µ–Ω–∏—è –Ω–∞—à–µ–≥–æ –ª—é–±–∏–º–æ–≥–æ –í–£–ó–∞!\n–í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ +%s I$Coins. –í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: %s I$Coins", update.CallbackQuery.From.Username, p.Sprintf("%d", 100000000*koef), p.Sprintf("%d", 100000000*koef+user.Balance))
		pic = jackPotITMO
	}

	if rand.Intn(112) == 111 {
		err = bs.updateBalance(10000000*koef, []int{user.ID})
		if err != nil {
			bs.Errorf("%v", err)
			return
		}
		res = fmt.Sprintf("@%s, –î–ñ–ï–ö–ü–û–¢! –í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ +%s I$Coins. –í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: %s I$Coins", update.CallbackQuery.From.Username, p.Sprintf("%d", 10000000*koef), p.Sprintf("%d", 10000000*koef+user.Balance))
		pic = jackPotPapikyan
	}

	_, err = b.EditMessageMedia(ctx, &bot.EditMessageMediaParams{
		InlineMessageID: update.CallbackQuery.InlineMessageID,
		Media: &models.InputMediaPhoto{
			Media:     pic,
			Caption:   res,
			ParseMode: models.ParseModeHTML,
			//HasSpoiler: true,
		},
		ReplyMarkup: models.InlineKeyboardMarkup{InlineKeyboard: [][]models.InlineKeyboardButton{
			{
				models.InlineKeyboardButton{
					Text:         "–°—ã–≥—Ä–∞—Ç—å –Ω–∞ 100k",
					CallbackData: patternPapikSlots + "_" + parts[1] + "_1",
				},
			},
			{
				models.InlineKeyboardButton{
					Text:         "–°—ã–≥—Ä–∞—Ç—å –Ω–∞ 500k",
					CallbackData: patternPapikSlots + "_" + parts[1] + "_5",
				},
			},
			{
				models.InlineKeyboardButton{
					Text:         "–°—ã–≥—Ä–∞—Ç—å –Ω–∞ 1m",
					CallbackData: patternPapikSlots + "_" + parts[1] + "_10",
				},
			},
		}},
	})

	if err != nil {
		if !strings.Contains(err.Error(), "cannot unmarshal bool") {
			bs.Errorf("%v", err)
		}
		if strings.Contains(err.Error(), "retry_after") {
			retryAfter := strings.Split(err.Error(), " ")
			retryAfterTime := retryAfter[len(retryAfter)-1]
			retryTime, err := strconv.Atoi(retryAfterTime)
			if err != nil {
				bs.Errorf("%v", err)
				return
			}
			time.Sleep(time.Duration(retryTime) * time.Second)
			errorMsg := fmt.Sprintf("–ò–∑–≤–∏–Ω–∏—Ç–µ, –±–æ—Ç –∑–∞–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –∏–∑-–∑–∞ –ø–µ—Ä–µ–≥—Ä—É–∑–∞ –∑–∞–ø—Ä–æ—Å–æ–≤.\n–ó–∞–¥–µ—Ä–∂–∫–∞:%ds", retryTime)

			b.EditMessageMedia(ctx, &bot.EditMessageMediaParams{
				InlineMessageID: update.CallbackQuery.InlineMessageID,
				Media: &models.InputMediaPhoto{
					Media:     pic,
					Caption:   res + "\n" + errorMsg,
					ParseMode: models.ParseModeHTML,
					//HasSpoiler: true,
				},
				ReplyMarkup: models.InlineKeyboardMarkup{InlineKeyboard: [][]models.InlineKeyboardButton{
					{
						models.InlineKeyboardButton{
							Text:         "–°—ã–≥—Ä–∞—Ç—å –Ω–∞ 100k",
							CallbackData: patternPapikSlots + "_" + parts[1] + "_1",
						},
					},
					{
						models.InlineKeyboardButton{
							Text:         "–°—ã–≥—Ä–∞—Ç—å –Ω–∞ 500k",
							CallbackData: patternPapikSlots + "_" + parts[1] + "_5",
						},
					},
					{
						models.InlineKeyboardButton{
							Text:         "–°—ã–≥—Ä–∞—Ç—å –Ω–∞ 1m",
							CallbackData: patternPapikSlots + "_" + parts[1] + "_10",
						},
					},
				}},
			})
		}
	}
}

func (bs *BotService) lossHandler(ctx context.Context, b *bot.Bot, update *models.Update, userId string) {
	b.EditMessageMedia(ctx, &bot.EditMessageMediaParams{
		InlineMessageID: update.CallbackQuery.InlineMessageID,
		Media: &models.InputMediaVideo{
			Media:     "https://media.tenor.com/aSkdq3IU0g0AAAAM/laughing-cat.gif",
			Caption:   "–í—ã –∏–∑—Ä–∞—Ö–æ–¥–æ–≤–∞–ª–∏ —Å–≤–æ–π –±–∞–ª–∞–Ω—Å!",
			ParseMode: models.ParseModeHTML,
			//HasSpoiler: true,
		},
		ReplyMarkup: models.InlineKeyboardMarkup{InlineKeyboard: [][]models.InlineKeyboardButton{
			{
				models.InlineKeyboardButton{
					Text:         "–•–æ—á—É –æ—Ç–∫—É–ø–∏—Ç—å—Å—è!",
					CallbackData: patternBuyBack + "_" + userId,
				},
			},
		}},
	})
}

func (bs *BotService) PlayersRatingHandler(ctx context.Context, b *bot.Bot, update *models.Update) {
	players, err := bs.cr.LudomenByFilters(ctx, &db.LudomanSearch{}, db.Pager{PageSize: 10}, db.WithSort(db.NewSortField(db.Columns.Ludoman.Balance, true), db.NewSortField(db.Columns.Ludoman.Losses, false)))
	if err != nil {
		bs.Errorf("%v", err)
		return
	}
	ludomans, err := bs.cr.LudomenByFilters(ctx, &db.LudomanSearch{}, db.Pager{PageSize: 10}, db.WithSort(db.NewSortField(db.Columns.Ludoman.Losses, true)))
	if err != nil {
		bs.Errorf("%v", err)
		return
	}

	// –®–∞–±–ª–æ–Ω –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å–ø–∏—Å–∫–∞
	listTemplate := `{{- range $index, $ludoman := . }}
{{- printf "\n%d. –ù–∏–∫–Ω–µ–π–º: @%s, –ë–∞–ª–∞–Ω—Å: %s, –ö–≤–∞—Ä—Ç–∏—Ä –ø—Ä–æ–¥–∞–Ω–æ: %d" (add $index 1) $ludoman.LudomanNickname (formatDigit $ludoman.Balance) $ludoman.Losses}}
{{- end }}
`
	// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è 1 –∫ –∏–Ω–¥–µ–∫—Å—É (—Ç–∞–∫ –∫–∞–∫ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—è —Å 0)
	funcMap := template.FuncMap{
		"add": func(a, b int) int {
			return a + b
		},
		"formatDigit": func(in int) string {
			return p.Sprintf("%d", in)
		},
	}

	// –°–æ–∑–¥–∞–µ–º —à–∞–±–ª–æ–Ω –∏ –ø–∞—Ä—Å–∏–º –µ–≥–æ
	tmpl, err := template.New("list").Funcs(funcMap).Parse(listTemplate)
	if err != nil {
		bs.Errorf("%v", err)
	}

	var buf bytes.Buffer
	var bufLosses bytes.Buffer

	// –í—ã–ø–æ–ª–Ω—è–µ–º —à–∞–±–ª–æ–Ω –∏ –≤—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
	err = tmpl.Execute(&buf, players)
	if err != nil {
		bs.Errorf("%v", err)
	}

	// –í—ã–ø–æ–ª–Ω—è–µ–º —à–∞–±–ª–æ–Ω –∏ –≤—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
	err = tmpl.Execute(&bufLosses, ludomans)
	if err != nil {
		bs.Errorf("%v", err)
	}

	_, err = b.EditMessageText(ctx, &bot.EditMessageTextParams{
		InlineMessageID: update.CallbackQuery.InlineMessageID,
		Text:            "–°–ø–∏—Å–æ–∫ —Ç–æ–ø –∏–≥—Ä–æ–∫–æ–≤:" + buf.String() + "\n\n–°–ø–∏—Å–æ–∫ —Ç–æ–ø –ª—É–¥–æ–º–∞–Ω–æ–≤:" + bufLosses.String(),
	})
	if err != nil {
		bs.Errorf("%v", err)
	}
}

func (bs *BotService) BuyBackHandler(ctx context.Context, b *bot.Bot, update *models.Update) {
	parts := strings.Split(update.CallbackQuery.Data, "_")
	if len(parts) < 2 {
		bs.Errorf("len(parts) < 2")
		return
	}

	// find user
	userId, err := strconv.Atoi(parts[1])
	if err != nil {
		bs.Errorf("%v", err)
	}
	user, err := bs.cr.LudomanByID(ctx, userId)
	if err != nil {
		bs.Errorf("%v", err)
	}

	if user.LudomanNickname != update.CallbackQuery.From.Username {
		_, err = b.AnswerCallbackQuery(ctx, &bot.AnswerCallbackQueryParams{
			CallbackQueryID: update.CallbackQuery.ID,
			Text:            "–≠—Ç–æ –Ω–µ –≤–∞—à –∞–≤—Ç–æ–º–∞—Ç! –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–æ—Ç–∞ –∏ —Ç–æ–∂–µ —Å–º–æ–∂–µ—Ç–µ —Å—ã–≥—Ä–∞—Ç—å :)",
			ShowAlert:       true,
		})
		if err != nil {
			bs.Errorf("%v", err)
		}
		return
	}

	user.Balance = 1000000
	user.Losses += 1
	_, err = bs.cr.UpdateLudoman(ctx, user, db.WithColumns(db.Columns.Ludoman.Balance, db.Columns.Ludoman.Losses))
	if err != nil {
		bs.Errorf("%v", err)
		return
	}

	b.EditMessageMedia(ctx, &bot.EditMessageMediaParams{
		InlineMessageID: update.CallbackQuery.InlineMessageID,
		Media: &models.InputMediaPhoto{
			Media:     "https://i.ibb.co/6R0Cz78Q/image-4.jpg",
			Caption:   fmt.Sprintf("–í—ã –æ—Ç–∫—É–ø–∏–ª–∏—Å—å! –°—á–µ—Ç—á–∏–∫ –≤–∞—à–∏—Ö –ø—Ä–æ–¥–∞–Ω–Ω—ã—Ö –∫–≤–∞—Ä—Ç–∏—Ä: %d\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–æ—Ç–∞ –∏ –ø—Ä–æ–∏–≥—Ä–∞–π—Ç–µ –≤—Å—ë —Å–Ω–æ–≤–∞, –∏–ª–∏ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–µ–≥–æ–¥–Ω—è –≤–∞–º –ø–æ–≤–µ–∑–µ—Ç –ø–æ–ø–∞—Å—Ç—å –≤ —Ç–æ–ø —Ä–µ–π—Ç–∏–Ω–≥–∞?)\n\np.s. –ø–æ—Å—Ç–∞–≤—å—Ç–µ –∑–≤–µ–∑–¥–æ—á–∫—É –≤ –≥–∏—Ç—Ö–∞–±–µ üëâüëà https://github.com/kroexov/gradeBot/tree/ludomania", user.Losses),
			ParseMode: models.ParseModeHTML,
			//HasSpoiler: true,
		},
	})
}

func (bs *BotService) MayatinRouletteHandler(ctx context.Context, b *bot.Bot, update *models.Update) {
	parts := strings.Split(update.CallbackQuery.Data, "_")
	if len(parts) < 2 {
		bs.Errorf("len(parts) < 2")
		return
	}

	// find user
	userId, err := strconv.Atoi(parts[1])
	if err != nil {
		bs.Errorf("%v", err)
	}
	user, err := bs.cr.LudomanByID(ctx, userId)
	if err != nil {
		bs.Errorf("%v", err)
	}

	if user.LudomanNickname != update.CallbackQuery.From.Username {
		_, err = b.AnswerCallbackQuery(ctx, &bot.AnswerCallbackQueryParams{
			CallbackQueryID: update.CallbackQuery.ID,
			Text:            "–≠—Ç–æ –Ω–µ –≤–∞—à –∞–≤—Ç–æ–º–∞—Ç! –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–æ—Ç–∞ –∏ —Ç–æ–∂–µ —Å–º–æ–∂–µ—Ç–µ —Å—ã–≥—Ä–∞—Ç—å :)",
			ShowAlert:       true,
		})
		return
	}

	if user.Balance < 100000 {
		bs.lossHandler(ctx, b, update, parts[1])
		return
	}

	if bs.isMayatinRouletteActive {
		_, err = b.AnswerCallbackQuery(ctx, &bot.AnswerCallbackQueryParams{
			CallbackQueryID: update.CallbackQuery.ID,
			Text:            "–†—É–ª–µ—Ç–∫–∞ —É–∂–µ –∏–¥–µ—Ç! –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ —Ç–µ–∫—É—â–µ–π!",
			ShowAlert:       true,
		})
		return
	}

	b.EditMessageMedia(ctx, &bot.EditMessageMediaParams{
		InlineMessageID: update.CallbackQuery.InlineMessageID,
		Media: &models.InputMediaVideo{
			Media:     "https://i.pinimg.com/originals/32/37/bf/3237bf1e172a6089e0c437ffd3b28010.gif",
			Caption:   fmt.Sprintf("–†—É–ª–µ—Ç–∫–∞ –ú–∞—è—Ç–∏–Ω–∞ –Ω–∞—á–∞–ª–∞—Å—å! –í—ã–±–∏—Ä–∞–π—Ç–µ –≤–∞—à —Å–ª–æ—Ç –≤ —Ä—É–ª–µ—Ç–∫–µ!\n–°—Ç–∞–≤–∫–∞ 500.000, —Å–ª–æ—Ç '–£–≤–∞–∂–∞–µ–º—ã–π –∫–æ–ª–ª–µ–≥–∞ –¥–∞–µ—Ç 10x –≤—ã–∏–≥—Ä—ã—à, –Ω–æ –≤—ã–ø–∞–¥–∞–µ—Ç —Ä–µ–∂–µ'\n–û—Å—Ç–∞–ª–æ—Å—å 20 —Å–µ–∫—É–Ω–¥!"),
			ParseMode: models.ParseModeHTML,
			//HasSpoiler: true,
		},
		ReplyMarkup: models.InlineKeyboardMarkup{InlineKeyboard: [][]models.InlineKeyboardButton{
			{
				models.InlineKeyboardButton{
					Text:         fmt.Sprintf("–ù–∞–¥—ë–∂–Ω–æ—Å—Ç—å! (0 —Å—Ç–∞–≤–æ–∫)"),
					CallbackData: patternMayatinRouletteBet + patternMayatinRouletteBetN,
				},
			},
			{
				models.InlineKeyboardButton{
					Text:         fmt.Sprintf("–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å! (0 —Å—Ç–∞–≤–æ–∫)"),
					CallbackData: patternMayatinRouletteBet + patternMayatinRouletteBetP,
				},
			},
			{
				models.InlineKeyboardButton{
					Text:         fmt.Sprintf("–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å! (0 —Å—Ç–∞–≤–æ–∫)"),
					CallbackData: patternMayatinRouletteBet + patternMayatinRouletteBetB,
				},
			},
			{
				models.InlineKeyboardButton{
					Text:         fmt.Sprintf("–£–≤–∞–∂–∞–µ–º—ã–π –∫–æ–ª–ª–µ–≥–∞ üòé (10x –≤—ã–∏–≥—Ä—ã—à, 0 —Å—Ç–∞–≤–æ–∫)"),
					CallbackData: patternMayatinRouletteBet + patternMayatinRouletteBetU,
				},
			},
		}},
	})

	bs.mayatinRouletteBets = new(sync.Map)
	bs.isMayatinRouletteActive = true
	bs.mayatinRouletteUsers = make(map[int]struct{})
	bs.mayatinCategoriesVotes = make(map[string]int)

	var errorMsg string

	for i := 0; i < 10; i++ {
		bs.mu.Lock()
		_, err = b.EditMessageCaption(ctx, &bot.EditMessageCaptionParams{
			Caption:         fmt.Sprintf("–†—É–ª–µ—Ç–∫–∞ –ú–∞—è—Ç–∏–Ω–∞ –Ω–∞—á–∞–ª–∞—Å—å! –í—ã–±–∏—Ä–∞–π—Ç–µ –≤–∞—à —Å–ª–æ—Ç –≤ —Ä—É–ª–µ—Ç–∫–µ!\n–°—Ç–∞–≤–∫–∞ 500.000, —Å–ª–æ—Ç '–£–≤–∞–∂–∞–µ–º—ã–π –∫–æ–ª–ª–µ–≥–∞ –¥–∞–µ—Ç 10x –≤—ã–∏–≥—Ä—ã—à, –Ω–æ –≤—ã–ø–∞–¥–∞–µ—Ç —Ä–µ–∂–µ'\n–û—Å—Ç–∞–ª–æ—Å—å %d —Å–µ–∫—É–Ω–¥!\n%s", (10-i)*2, errorMsg),
			InlineMessageID: update.CallbackQuery.InlineMessageID,
			ReplyMarkup: models.InlineKeyboardMarkup{InlineKeyboard: [][]models.InlineKeyboardButton{
				{
					models.InlineKeyboardButton{
						Text:         fmt.Sprintf("–ù–∞–¥—ë–∂–Ω–æ—Å—Ç—å! (%d —Å—Ç–∞–≤–æ–∫)", bs.mayatinCategoriesVotes[patternMayatinRouletteBetN]),
						CallbackData: patternMayatinRouletteBet + patternMayatinRouletteBetN,
					},
				},
				{
					models.InlineKeyboardButton{
						Text:         fmt.Sprintf("–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å! (%d —Å—Ç–∞–≤–æ–∫)", bs.mayatinCategoriesVotes[patternMayatinRouletteBetP]),
						CallbackData: patternMayatinRouletteBet + patternMayatinRouletteBetP,
					},
				},
				{
					models.InlineKeyboardButton{
						Text:         fmt.Sprintf("–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å! (%d —Å—Ç–∞–≤–æ–∫)", bs.mayatinCategoriesVotes[patternMayatinRouletteBetB]),
						CallbackData: patternMayatinRouletteBet + patternMayatinRouletteBetB,
					},
				},
				{
					models.InlineKeyboardButton{
						Text:         fmt.Sprintf("–£–≤–∞–∂–∞–µ–º—ã–π –∫–æ–ª–ª–µ–≥–∞ üòé (10x –≤—ã–∏–≥—Ä—ã—à, %d —Å—Ç–∞–≤–æ–∫)", bs.mayatinCategoriesVotes[patternMayatinRouletteBetU]),
						CallbackData: patternMayatinRouletteBet + patternMayatinRouletteBetU,
					},
				},
			}},
		})
		if err != nil {
			if !strings.Contains(err.Error(), "cannot unmarshal bool") {
				bs.Errorf("%v", err)
			}

			if strings.Contains(err.Error(), "retry_after") {
				retryAfter := strings.Split(err.Error(), " ")
				retryAfterTime := retryAfter[len(retryAfter)-1]
				retryTime, err := strconv.Atoi(retryAfterTime)
				if err != nil {
					bs.Errorf("%v", err)
					return
				}
				time.Sleep(time.Duration(retryTime) * time.Second)
				errorMsg = fmt.Sprintf("–ò–∑–≤–∏–Ω–∏—Ç–µ, –±–æ—Ç –∑–∞–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –∏–∑-–∑–∞ –ø–µ—Ä–µ–≥—Ä—É–∑–∞ –∑–∞–ø—Ä–æ—Å–æ–≤.\n–ó–∞–¥–µ—Ä–∂–∫–∞:%ds", retryTime)
			}
		}
		bs.mu.Unlock()
		time.Sleep(2 * time.Second)
	}

	i := rand.Intn(100)
	var selectedCategory string
	switch {
	case i <= 30:
		selectedCategory = patternMayatinRouletteBetP
	case i <= 60:
		selectedCategory = patternMayatinRouletteBetB
	case i <= 90:
		selectedCategory = patternMayatinRouletteBetN
	default:
		selectedCategory = patternMayatinRouletteBetU
	}
	cat := mayatinCategories[selectedCategory]

	var winners []int
	// Iterating over sync.Map
	bs.mayatinRouletteBets.Range(func(key, value interface{}) bool {
		println(key.(int), value.(string))
		if value.(string) == selectedCategory {
			winners = append(winners, key.(int))
		}
		return true
	})

	err = bs.updateBalance(-500000, intKeys(bs.mayatinRouletteUsers))
	if err != nil {
		bs.Errorf("%v", err)
		return
	}

	var result string
	if len(winners) == 0 {
		result = `–ü–æ–±–µ–¥–∏—Ç–µ–ª–µ–π –Ω–µ—Ç ü´µüòπ`
	} else {
		winUsers, err := bs.cr.LudomenByFilters(ctx, &db.LudomanSearch{IDs: winners}, db.PagerNoLimit)
		if err != nil {
			bs.Errorf("%v", err)
		}
		result = "–°–ø–∏—Å–æ–∫ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π: "
		for _, winUser := range winUsers {
			result += "@" + winUser.LudomanNickname + " "
		}
		result += fmt.Sprintf("\n–ü–æ–±–µ–¥–∏—Ç–µ–ª—è–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ: %s", p.Sprintf("%d", cat.WinSum))

		err = bs.updateBalance(cat.WinSum, db.Ludomans(winUsers).IDs())
		if err != nil {
			bs.Errorf("%v", err)
			return
		}
	}

	b.EditMessageMedia(ctx, &bot.EditMessageMediaParams{
		InlineMessageID: update.CallbackQuery.InlineMessageID,
		Media: &models.InputMediaPhoto{
			Media:     cat.CategoryPic,
			Caption:   fmt.Sprintf("–†—É–ª–µ—Ç–∫–∞ –ú–∞—è—Ç–∏–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –í—ã–ø–∞–ª–æ: %s!\n%s", cat.CategoryName, result),
			ParseMode: models.ParseModeHTML,
			//HasSpoiler: true,
		},
	})

	bs.isMayatinRouletteActive = false
}

func (bs *BotService) MayatinRouletteBetHandler(ctx context.Context, b *bot.Bot, update *models.Update) {
	parts := strings.Split(update.CallbackQuery.Data, "_")
	if len(parts) < 2 {
		bs.Errorf("len(parts) < 2")
		return
	}
	userBet := parts[1]

	// find user
	user, err := bs.cr.OneLudoman(ctx, &db.LudomanSearch{LudomanNickname: &update.CallbackQuery.From.Username})
	if err != nil {
		bs.Errorf("%v", err)
	} else if user == nil {
		_, err = b.AnswerCallbackQuery(ctx, &bot.AnswerCallbackQueryParams{
			CallbackQueryID: update.CallbackQuery.ID,
			Text:            "–í–∞—Å –µ—â–µ –Ω–µ—Ç –≤ –Ω–∞—à–µ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö :( –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∞—Ç—å—Å—è –≤ –±–æ—Ç–µ",
			ShowAlert:       true,
		})
		return
	}

	if _, ok := bs.mayatinRouletteUsers[user.ID]; ok {
		_, err = b.AnswerCallbackQuery(ctx, &bot.AnswerCallbackQueryParams{
			CallbackQueryID: update.CallbackQuery.ID,
			Text:            "–í—ã —É–∂–µ –ø–æ—Å—Ç–∞–≤–∏–ª–∏ –Ω–∞ —Ä—É–ª–µ—Ç–∫—É! –¢–µ–ø–µ—Ä—å –∂–¥–∏—Ç–µ –∏ –º–æ–ª–∏—Ç–µ—Å—å :)",
			ShowAlert:       true,
		})
		return
	}

	if user.Balance < 500000 {
		_, err = b.AnswerCallbackQuery(ctx, &bot.AnswerCallbackQueryParams{
			CallbackQueryID: update.CallbackQuery.ID,
			Text:            "–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥ –¥–ª—è —ç—Ç–æ–π —Å—Ç–∞–≤–∫–∏ :/",
			ShowAlert:       true,
		})
		return
	}

	if bs.mayatinRouletteUsers == nil {
		return
	}

	bs.mu.Lock()
	bs.mayatinRouletteUsers[user.ID] = struct{}{}
	bs.mayatinCategoriesVotes["_"+userBet]++
	bs.mu.Unlock()

	bs.mayatinRouletteBets.Store(user.ID, "_"+userBet)
}

func Pointer[T any](in T) *T {
	return &in
}

func intKeys(in map[int]struct{}) []int {
	out := make([]int, 0, len(in))
	for v := range in {
		out = append(out, v)
	}
	return out
}

func (bs *BotService) updateBalance(sum int, ids []int) error {
	if len(ids) > 0 {
		_, err := bs.db.Exec(`update ludomans set balance = balance + ? where "ludomanId" in (?)`, sum, pg.In(ids))
		return err
	}
	return nil
}
