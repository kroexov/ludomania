package ludomania

import (
	"context"
	"fmt"
	"github.com/go-telegram/bot"
	"github.com/go-telegram/bot/models"
	"gradebot/pkg/db"
	"strconv"
	"strings"
)

const (
	patternBuyBackHouse = "buyBackHouse"
	patternBuyTicket    = "buyTicket"
	patternCoef1        = "setCoef_1"
	patternCoef10       = "setCoef_10"
	patternCoef100      = "setCoef_100"
	patternCoef200      = "setCoef_200"
	patternCoef500      = "setCoef_500"
	patternOfferCoef    = "offerCoef:"
)

func (bs *BotService) extraOptions(userId int) models.InlineQueryResult {
	return &models.InlineQueryResultArticle{
		ID:           "5",
		Title:        "–û—Å–æ–±—ã–µ –æ–ø—Ü–∏–∏ ü§≠",
		ThumbnailURL: "https://linda.nyc3.cdn.digitaloceanspaces.com/370_npd_webp-o_18/sticker-fan_11513288_o.webp",
		ReplyMarkup: models.InlineKeyboardMarkup{
			InlineKeyboard: [][]models.InlineKeyboardButton{
				{
					models.InlineKeyboardButton{
						Text:         "–í—ã–∫—É–ø–∏—Ç—å –∫–≤–∞—Ä—Ç–∏—Ä—É (2–ú)",
						CallbackData: patternBuyBackHouse + "_" + strconv.Itoa(userId),
					},
				},
				{
					models.InlineKeyboardButton{
						Text:         "–ö—É–ø–∏—Ç—å –±–∏–ª–µ—Ç –Ω–∞ –∏—Ä–ª —Ç—É—Ä–∏–∫ –ø–æ –ø–æ–∫–µ—Ä—É (100M)",
						CallbackData: patternBuyTicket + "_" + strconv.Itoa(userId),
					},
				},
				{
					models.InlineKeyboardButton{
						Text:         "–ø–æ—Å—Ç–∞–≤–∏—Ç—å –∫—ç—Ñ x1 ",
						CallbackData: patternCoef1 + "_" + strconv.Itoa(userId),
					},
				},
				{
					models.InlineKeyboardButton{
						Text:         "–ø–æ—Å—Ç–∞–≤–∏—Ç—å –∫—ç—Ñ x10 ",
						CallbackData: patternCoef10 + "_" + strconv.Itoa(userId),
					},
				},
				{
					models.InlineKeyboardButton{
						Text:         "–ø–æ—Å—Ç–∞–≤–∏—Ç—å –∫—ç—Ñ x100 ",
						CallbackData: patternCoef100 + "_" + strconv.Itoa(userId),
					},
				},
				{
					models.InlineKeyboardButton{
						Text:         "–ø–æ—Å—Ç–∞–≤–∏—Ç—å –∫—ç—Ñ x200 ",
						CallbackData: patternCoef200 + "_" + strconv.Itoa(userId),
					},
				},
				{
					models.InlineKeyboardButton{
						Text:         "–ø–æ—Å—Ç–∞–≤–∏—Ç—å –∫—ç—Ñ x500 ",
						CallbackData: patternCoef500 + "_" + strconv.Itoa(userId),
					},
				},
			}},
		InputMessageContent: &models.InputTextMessageContent{
			MessageText: fmt.Sprintf("ü§≠ü§≠ü§≠ü§≠ü§≠ü§≠ü§≠"),
		}}
}
func (bs *BotService) OfferBuyCoef(ctx context.Context, b *bot.Bot, inlineMsgID string, userID, coef int) error {
	keyboard := models.InlineKeyboardMarkup{
		InlineKeyboard: [][]models.InlineKeyboardButton{{
			{
				Text:         "–î–∞",
				CallbackData: fmt.Sprintf("%syes_%d_%d", patternOfferCoef, userID, coef),
			},
			{
				Text:         "–ù–µ—Ç",
				CallbackData: fmt.Sprintf("%sno_%d_%d", patternOfferCoef, userID, coef),
			},
		}},
	}
	_, err := b.EditMessageText(ctx, &bot.EditMessageTextParams{
		InlineMessageID: inlineMsgID,
		Text:            fmt.Sprintf("–û—Ç–∫—Ä—ã—Ç—å –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç %d –∑–∞ %d I$ coins?", coef, coef*1_000_000),
		ReplyMarkup:     keyboard,
	})
	if err != nil {
		fmt.Println(err)
	}
	return err
}

func (bs *BotService) SetCoefHandler(ctx context.Context, b *bot.Bot, update *models.Update) {
	parts := strings.Split(update.CallbackQuery.Data, "_")
	if len(parts) < 2 {
		bs.Errorf("invalid callback data: %s", update.CallbackQuery.Data)
		return
	}

	userID, err := strconv.Atoi(parts[2])
	if err != nil {
		bs.Errorf("invalid user id: %v", err)
		return
	}

	user, err := bs.cr.LudomanByID(ctx, userID)
	if err != nil {
		bs.Errorf("failed to get user: %v", err)
		return
	}

	if user.LudomanNickname != update.CallbackQuery.From.Username {
		bs.respondToCallback(ctx, b, update.CallbackQuery.ID, "–≠—Ç–æ –Ω–µ –≤–∞—à–µ –æ–∫–Ω–æ !")
		return
	}
	coef, err := strconv.Atoi(parts[1])
	fmt.Println("parts == ", parts)
	if err != nil {
		bs.Errorf("invalid coef: %v", err)
		return
	}

	messageID := update.CallbackQuery.InlineMessageID
	fmt.Println("messageID == ", messageID)
	//messageID := update.CallbackQuery.Message.Message.ID
	fmt.Printf("Inf if")

	switch coef {
	case 1:
		user.Coefficient = 1
	case 10:
		if user.Data.K10 {
			user.Coefficient = 10
		} else {
			_ = bs.OfferBuyCoef(ctx, b, messageID, userID, 10)
			return
		}
	case 100:
		if user.Data.K100 {
			user.Coefficient = 100
		} else {
			_ = bs.OfferBuyCoef(ctx, b, messageID, userID, 100)
			return
		}
	case 200:
		if user.Data.K200 {
			user.Coefficient = 200
		} else {
			_ = bs.OfferBuyCoef(ctx, b, messageID, userID, 200)
			return
		}
	case 500:
		if user.Data.K500 {
			user.Coefficient = 500
		} else {
			_ = bs.OfferBuyCoef(ctx, b, messageID, userID, 500)
			return
		}
	default:
		bs.respondToCallback(ctx, b, update.CallbackQuery.ID, "–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç.")
		return
	}

	if _, err := bs.cr.UpdateLudoman(ctx, user,
		db.WithColumns(db.Columns.Ludoman.Coefficient, db.Columns.Ludoman.Data)); err != nil {
		bs.respondToCallback(ctx, b, update.CallbackQuery.ID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏.")
		bs.Errorf("update user coef failed: %v", err)
		return
	}

	bs.respondToCallback(ctx, b, update.CallbackQuery.ID, fmt.Sprintf("–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: %d", coef))
	_, _ = b.EditMessageText(ctx, &bot.EditMessageTextParams{
		InlineMessageID: messageID,
		Text:            fmt.Sprintf("–í–∞—à –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç %d –∞–∫—Ç–∏–≤–µ–Ω", coef),
		ReplyMarkup:     nil,
	})
}
func (bs *BotService) HandleOfferCoefCallback(ctx context.Context, b *bot.Bot, update *models.Update) {
	data := update.CallbackQuery.Data[len(patternOfferCoef):]
	parts := strings.Split(data, "_")
	fmt.Println(parts)
	if len(parts) != 3 {
		bs.respondToCallback(ctx, b, update.CallbackQuery.ID, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.")
		return
	}

	action, uidStr, coefStr := parts[0], parts[1], parts[2]
	userID, err1 := strconv.Atoi(uidStr)
	coefVal, err2 := strconv.Atoi(coefStr)
	if err1 != nil || err2 != nil {
		bs.respondToCallback(ctx, b, update.CallbackQuery.ID, "–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.")
		return
	}

	user, err := bs.cr.LudomanByID(ctx, userID)
	if err != nil || user == nil {
		bs.respondToCallback(ctx, b, update.CallbackQuery.ID, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
		return
	}

	if user.LudomanNickname != update.CallbackQuery.From.Username {
		bs.respondToCallback(ctx, b, update.CallbackQuery.ID, "–≠—Ç–æ –Ω–µ –≤–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ.")
		return
	}

	if action == "yes" {
		if user.Balance >= coefVal*1000000 {
			bs.updateBalance(-coefVal*1000000, []int{user.ID}, true, 1)
			switch {
			case coefVal == 10:
				user.Data.K10 = true
				user.Coefficient = 10
			case coefVal == 100:
				user.Data.K100 = true
				user.Coefficient = 100
			case coefVal == 200:
				user.Data.K200 = true
				user.Coefficient = 200
			case coefVal == 500:
				user.Data.K500 = true
				user.Coefficient = 500
			}
			_, err = bs.cr.UpdateLudoman(ctx, user,
				db.WithColumns(db.Columns.Ludoman.Coefficient, db.Columns.Ludoman.Data),
			)
			user.Coefficient = coefVal
			bs.respondToCallback(ctx, b, update.CallbackQuery.ID, fmt.Sprintf("–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: %d", coefVal))
			if _, err := b.EditMessageText(ctx, &bot.EditMessageTextParams{
				InlineMessageID: update.CallbackQuery.InlineMessageID,
				Text:            fmt.Sprintf("–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç %d —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", coefVal),
			}); err != nil {
				bs.Errorf("failed to edit text: %v", err)
			}
		} else {
			bs.respondToCallback(ctx, b, update.CallbackQuery.ID, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ I$ coins –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞")
			if _, err := b.EditMessageText(ctx, &bot.EditMessageTextParams{
				InlineMessageID: update.CallbackQuery.InlineMessageID,
				Text:            fmt.Sprintf("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ I$ coins –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –¥–∞–Ω–Ω–æ–≥–æ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞"),
			}); err != nil {
				bs.Errorf("failed to edit text: %v", err)
			}
		}
	} else {
		bs.respondToCallback(ctx, b, update.CallbackQuery.ID, "–í—ã –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å –æ—Ç –ø–æ–∫—É–ø–∫–∏ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞.")
		if _, err := b.EditMessageText(ctx, &bot.EditMessageTextParams{
			InlineMessageID: update.CallbackQuery.InlineMessageID,
			Text:            fmt.Sprintf("–ñ–∞–ª—å, —á—Ç–æ –≤—ã –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å –æ—Ç –ø–æ–∫—É–ø–∫–∏ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞"),
		}); err != nil {
			bs.Errorf("failed to edit text: %v", err)
		}
	}

	if _, err := b.EditMessageReplyMarkup(ctx, &bot.EditMessageReplyMarkupParams{
		InlineMessageID: update.CallbackQuery.InlineMessageID,
		ReplyMarkup:     nil,
	}); err != nil {
		bs.Errorf("failed to remove keyboard: %v", err)
	}

}

func (bs *BotService) BuybackHouseHandler(ctx context.Context, b *bot.Bot, update *models.Update) {
	parts := strings.Split(update.CallbackQuery.Data, "_")
	if len(parts) < 2 {
		bs.Errorf("invalid callback data: %s", update.CallbackQuery.Data)
		return
	}

	userID, err := strconv.Atoi(parts[1])
	if err != nil {
		bs.Errorf("invalid user id: %v", err)
		return
	}

	user, err := bs.cr.LudomanByID(ctx, userID)
	if err != nil {
		bs.Errorf("failed to get user: %v", err)
		return
	}

	if user.LudomanNickname != update.CallbackQuery.From.Username {
		bs.respondToCallback(ctx, b, update.CallbackQuery.ID, "–≠—Ç–æ –Ω–µ –≤–∞—à–µ –æ–∫–Ω–æ –≤—ã–∫—É–ø–∞ –∫–≤–∞—Ä—Ç–∏—Ä—ã !")
		return
	}

	if user.Balance < 2000000 {
		bs.respondToCallback(ctx, b, update.CallbackQuery.ID, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ i$ coins –¥–ª—è –≤—ã–∫—É–ø–∞ –∫–≤–∞—Ä—Ç–∏—Ä—ã –æ–±—Ä–∞—Ç–Ω–æ :(")
		return
	}

	if user.Losses <= 0 {
		bs.respondToCallback(ctx, b, update.CallbackQuery.ID, "–í–∞–º –Ω–µ—á–µ–≥–æ –≤—ã–∫—É–ø–∞—Ç—å, –ø–æ—Ä–∞ —Å—ã–≥—Ä–∞—Ç—å –≤ i$ –∫–∞–∑–∏–∫")
		return
	}

	err = bs.updateBalance(-2000000, []int{user.ID}, true, 1)
	if err != nil {
		bs.Errorf("%v", err)
		return
	}
	user.Losses = user.Losses - 1
	_, err = bs.cr.UpdateLudoman(ctx, user, db.WithColumns(db.Columns.Ludoman.Losses))
	if err != nil {
		bs.Errorf("failed to update user: %v", err)
		return
	}

	bs.respondToCallback(ctx, b, update.CallbackQuery.ID, fmt.Sprintf("–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã–∫—É–ø–∏–ª–∏ –∫–≤–∞—Ä—Ç–∏—Ä—É –æ–±—Ä–∞—Ç–Ω–æ!\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥–∞–Ω–Ω—ã—Ö –∫–≤–∞—Ä—Ç–∏—Ä: %d", user.Losses))
}

func (bs *BotService) BuyTicketHandler(ctx context.Context, b *bot.Bot, update *models.Update) {
	parts := strings.Split(update.CallbackQuery.Data, "_")
	if len(parts) < 2 {
		bs.Errorf("invalid callback data: %s", update.CallbackQuery.Data)
		return
	}

	userID, err := strconv.Atoi(parts[1])
	if err != nil {
		bs.Errorf("invalid user id: %v", err)
		return
	}

	user, err := bs.cr.LudomanByID(ctx, userID)
	if err != nil {
		bs.Errorf("failed to get user: %v", err)
		return
	}

	if user.LudomanNickname != update.CallbackQuery.From.Username {
		bs.respondToCallback(ctx, b, update.CallbackQuery.ID, "–ù–µ –≤–∞—à–µ –æ–∫–Ω–æ –ø–æ–∫—É–ø–∫–∏ –±–∏–ª–µ—Ç–∞!")
		return
	}

	if user.Balance < 100000000 {
		bs.respondToCallback(ctx, b, update.CallbackQuery.ID, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ i$ coins –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –±–∏–ª–µ—Ç–∞ –Ω–∞ —Ç—É—Ä–∏–∫ :(")
		return
	}

	err = bs.updateBalance(-100000000, []int{user.ID}, true, 1)
	if err != nil {
		bs.Errorf("%v", err)
		return
	}

	_, err = bs.db.Exec(`insert into tournamentusers (userid) values (?);`, user.ID)
	if err != nil {
		bs.Errorf("%v", err)
		bs.respondToCallback(ctx, b, update.CallbackQuery.ID, err.Error())
		return
	}

	link, err := b.CreateChatInviteLink(ctx, &bot.CreateChatInviteLinkParams{
		ChatID:      bs.tournamentChatId,
		Name:        "–ò–Ω–≤–∞–π—Ç –≤ —Ç—É—Ä–∏–∫ –ø–æ –ø–æ–∫–µ—Ä—É –ò–°.–†–∞–±–æ—Ç–∞",
		MemberLimit: 1,
	})
	if err != nil {
		bs.Errorf("%v", err)
		return
	}

	_, err = b.EditMessageText(ctx, &bot.EditMessageTextParams{
		Text:            "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!\n–í–æ—Ç –≤–∞—à–∞ —Å—Å—ã–ª–∫–∞ –≤ —á–∞—Ç –Ω–∞ —Ç—É—Ä–∏–∫ –ø–æ –ø–æ–∫–µ—Ä—É: " + link.InviteLink,
		InlineMessageID: update.CallbackQuery.InlineMessageID,
		ReplyMarkup:     nil,
	})
	if err != nil {
		bs.Errorf("%v", err)
		return
	}
}
