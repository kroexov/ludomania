package ludomania

import (
	"context"
	"fmt"
	"github.com/go-telegram/bot"
	"github.com/go-telegram/bot/models"
	"gradebot/pkg/db"
	"strconv"
	"strings"
)

const (
	patternBuyBackHouse = "buyBackHouse"
	patternBuyTicket    = "buyTicket"
)

func (bs *BotService) extraOptions(userId int) models.InlineQueryResult {
	return &models.InlineQueryResultArticle{
		ID:           "5",
		Title:        "–û—Å–æ–±—ã–µ –æ–ø—Ü–∏–∏ ü§≠",
		ThumbnailURL: "https://linda.nyc3.cdn.digitaloceanspaces.com/370_npd_webp-o_18/sticker-fan_11513288_o.webp",
		ReplyMarkup: models.InlineKeyboardMarkup{
			InlineKeyboard: [][]models.InlineKeyboardButton{
				{
					models.InlineKeyboardButton{
						Text:         "–í—ã–∫—É–ø–∏—Ç—å –∫–≤–∞—Ä—Ç–∏—Ä—É (2–ú)",
						CallbackData: patternBuyBackHouse + "_" + strconv.Itoa(userId),
					},
				},
				{
					models.InlineKeyboardButton{
						Text:         "–ö—É–ø–∏—Ç—å –±–∏–ª–µ—Ç –Ω–∞ –∏—Ä–ª —Ç—É—Ä–∏–∫ –ø–æ –ø–æ–∫–µ—Ä—É (100M)",
						CallbackData: patternBuyTicket + "_" + strconv.Itoa(userId),
					},
				},
			}},
		InputMessageContent: &models.InputTextMessageContent{
			MessageText: fmt.Sprintf("ü§≠ü§≠ü§≠ü§≠ü§≠ü§≠ü§≠"),
		}}
}

func (bs *BotService) BuybackHouseHandler(ctx context.Context, b *bot.Bot, update *models.Update) {
	parts := strings.Split(update.CallbackQuery.Data, "_")
	if len(parts) < 2 {
		bs.Errorf("invalid callback data: %s", update.CallbackQuery.Data)
		return
	}

	userID, err := strconv.Atoi(parts[1])
	if err != nil {
		bs.Errorf("invalid user id: %v", err)
		return
	}

	user, err := bs.cr.LudomanByID(ctx, userID)
	if err != nil {
		bs.Errorf("failed to get user: %v", err)
		return
	}

	if user.LudomanNickname != update.CallbackQuery.From.Username {
		bs.respondToCallback(ctx, b, update.CallbackQuery.ID, "–≠—Ç–æ –Ω–µ –≤–∞—à–µ –æ–∫–Ω–æ –≤—ã–∫—É–ø–∞ –∫–≤–∞—Ä—Ç–∏—Ä—ã !")
		return
	}

	if user.Balance < 2000000 {
		bs.respondToCallback(ctx, b, update.CallbackQuery.ID, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ i$ coins –¥–ª—è –≤—ã–∫—É–ø–∞ –∫–≤–∞—Ä—Ç–∏—Ä—ã –æ–±—Ä–∞—Ç–Ω–æ :(")
		return
	}

	if user.Losses <= 0 {
		bs.respondToCallback(ctx, b, update.CallbackQuery.ID, "–í–∞–º –Ω–µ—á–µ–≥–æ –≤—ã–∫—É–ø–∞—Ç—å, –ø–æ—Ä–∞ —Å—ã–≥—Ä–∞—Ç—å –≤ i$ –∫–∞–∑–∏–∫")
		return
	}

	err = bs.updateBalance(-2000000, []int{user.ID}, true)
	if err != nil {
		bs.Errorf("%v", err)
		return
	}
	user.Losses = user.Losses - 1
	_, err = bs.cr.UpdateLudoman(ctx, user, db.WithColumns(db.Columns.Ludoman.Losses))
	if err != nil {
		bs.Errorf("failed to update user: %v", err)
		return
	}

	bs.respondToCallback(ctx, b, update.CallbackQuery.ID, fmt.Sprintf("–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã–∫—É–ø–∏–ª–∏ –∫–≤–∞—Ä—Ç–∏—Ä—É –æ–±—Ä–∞—Ç–Ω–æ!\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥–∞–Ω–Ω—ã—Ö –∫–≤–∞—Ä—Ç–∏—Ä: %d", user.Losses))
}

func (bs *BotService) BuyTicketHandler(ctx context.Context, b *bot.Bot, update *models.Update) {
	parts := strings.Split(update.CallbackQuery.Data, "_")
	if len(parts) < 2 {
		bs.Errorf("invalid callback data: %s", update.CallbackQuery.Data)
		return
	}

	userID, err := strconv.Atoi(parts[1])
	if err != nil {
		bs.Errorf("invalid user id: %v", err)
		return
	}

	user, err := bs.cr.LudomanByID(ctx, userID)
	if err != nil {
		bs.Errorf("failed to get user: %v", err)
		return
	}

	if user.LudomanNickname != update.CallbackQuery.From.Username {
		bs.respondToCallback(ctx, b, update.CallbackQuery.ID, "–ù–µ –≤–∞—à–µ –æ–∫–Ω–æ –ø–æ–∫—É–ø–∫–∏ –±–∏–ª–µ—Ç–∞!")
		return
	}

	if user.Balance < 100000000 {
		bs.respondToCallback(ctx, b, update.CallbackQuery.ID, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ i$ coins –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –±–∏–ª–µ—Ç–∞ –Ω–∞ —Ç—É—Ä–∏–∫ :(")
		return
	}

	err = bs.updateBalance(-100000000, []int{user.ID}, true)
	if err != nil {
		bs.Errorf("%v", err)
		return
	}

	_, err = bs.db.Exec(`insert into tournamentusers (userid) values (?);`, user.ID)
	if err != nil {
		bs.Errorf("%v", err)
		bs.respondToCallback(ctx, b, update.CallbackQuery.ID, err.Error())
		return
	}

	link, err := b.CreateChatInviteLink(ctx, &bot.CreateChatInviteLinkParams{
		ChatID:      bs.tournamentChatId,
		Name:        "–ò–Ω–≤–∞–π—Ç –≤ —Ç—É—Ä–∏–∫ –ø–æ –ø–æ–∫–µ—Ä—É –ò–°.–†–∞–±–æ—Ç–∞",
		MemberLimit: 1,
	})
	if err != nil {
		bs.Errorf("%v", err)
		return
	}

	_, err = b.EditMessageText(ctx, &bot.EditMessageTextParams{
		Text:            "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!\n–í–æ—Ç –≤–∞—à–∞ —Å—Å—ã–ª–∫–∞ –≤ —á–∞—Ç –Ω–∞ —Ç—É—Ä–∏–∫ –ø–æ –ø–æ–∫–µ—Ä—É: " + link.InviteLink,
		InlineMessageID: update.CallbackQuery.InlineMessageID,
		ReplyMarkup:     nil,
	})
	if err != nil {
		bs.Errorf("%v", err)
		return
	}
}
